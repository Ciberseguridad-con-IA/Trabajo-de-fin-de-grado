# -*- coding: utf-8 -*-
"""Google-RAG-Question.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vFkbr2RoCwD752bWxQx8OEVlLHIMqgnQ
"""

!pip install --quiet --upgrade langchain-text-splitters langchain-community langgraph langchain-google-vertexai langchain-core

import os
from langchain.chat_models import init_chat_model
from langchain_google_vertexai import VertexAIEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import TextLoader
from langchain_core.documents import Document
from typing_extensions import List, TypedDict
from langchain import hub
from google.colab import drive

drive.mount('/content/drive')

credentials = '/content/drive/MyDrive/TFG-Ciber/Data-Set-Nacho/cybernetic-hue-455208-i2-d9a46af731a9.json'
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials

llm = init_chat_model("gemini-2.0-flash-001", model_provider="google_vertexai")

file_name = 'Knock-Knock_ 1.1.txt'
file_path = '/content/drive/MyDrive/TFG-Ciber/Data-Set-Nacho/Files/' + file_name

loader = TextLoader(file_path, encoding='UTF-8')
docs = loader.load()

text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=1000,
    chunk_overlap=200,
    add_start_index=True,
)
all_splits = text_splitter.split_documents(docs)

class State(TypedDict):
    chunk_text: str
    generated_questions: List[str]

# Generate questions for each chunk
prompt_template = """
You are an AI assistant designed to analyze walkthrough texts for hacking VulnHub machines.
Your task is to generate relevant questions based on the hacking process described in the text.
These questions should be framed as if a student is asking a teacher for guidance,
ensuring they align with the actual steps followed in the walkthrough.

Instructions:
- Read the walkthrough carefully and follow the hacking methodology step by step.
- Identify key phases: reconnaissance, enumeration, exploitation, privilege escalation, and post-exploitation.
- Focus on the logical progression of the attack, ensuring the questions follow the sequence in the text.

Question Generation:
- Formulate questions from the perspective of a student seeking guidance on the hacking process.
- Questions should feel natural and flow logically based on the steps in the text.

Examples:
"How do I begin the hacking process?"
"What should I do after discovering open ports?"
"How can I exploit this vulnerability?"
"What is the next step after gaining a low-privilege shell?"

Ensure that each question relates directly to the walkthrough and does not introduce unrelated concepts.

Output Format:
- The output should be plain text, with each question on a new line, formatted like this:
  Question: [Generated question]

Guidelines:
- Do not extract or generate answers, only formulate questions.
- Ensure that questions match the order and logic of the hacking process described in the text.
- Avoid generic or overly broad questions that do not directly relate to the specific walkthrough.
- If a step is unclear or ambiguous, generate a question that naturally follows the available information.

Walkthrough Chunk:
{chunk_text}

Generate the list of questions:
"""

def generate_questions_per_chunk(chunk: Document):
    messages = prompt_template.format(chunk_text=chunk.page_content)
    response = llm.invoke(messages)
    questions = response.content.strip().split("\n")
    return questions

all_questions = []
for chunk in all_splits:
    questions = generate_questions_per_chunk(chunk)
    all_questions.extend(questions)

result_text = [line.replace("Question: ", "").strip() for line in all_questions]
formatted_text = "\n".join(result_text)
print(formatted_text)

result_path = '/content/drive/MyDrive/TFG-Ciber/Data-Set-Nacho/Questions/' + file_name
with open(result_path, "w", encoding="utf-8") as file:
    file.write(formatted_text)